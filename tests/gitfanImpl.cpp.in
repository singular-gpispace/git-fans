#include <gtest/gtest.h>

#include <util-gitfan/gitfanInterface.hpp>
#include <util-gitfan/simplexfaceiterator.hpp>
#include <util-gitfan/conversion.hpp>
#include <util-gitfan/type_aliases.hpp>
#include <util-gitfan/ostreamOverloads.hpp>
#include <util-gitfan/paths.hpp>
#include <util-gitfan/singular_commands.hpp>
#include <util-gitfan/singular_library_wrapper.hpp>
#include <util-gitfan/filecontent_operations.hpp>

#include <storage/options.hpp>

#include <util.hpp>
#include <temporaryUniquePath.hpp>

#include <boost/range/adaptor/transformed.hpp>

#include <we/type/value/poke.hpp>

#include <pnetc/type/file/op.hpp>

#include <vector>
#include <random>

namespace gitfan {
namespace interface {
namespace testing
{
  namespace fs = boost::filesystem;
  namespace pnetval = pnet::type::value;
  using namespace ::gitfan::testing;

  class GitfanInterfaceTest : public ::testing::Test
  {
    private:
      static pnet_list _fullDimAFaces;
      static pnet_list _orbitCones;

    public:
      static const fs::path dataPath;
      pnet_problem_data data;
      std::string storageOptions;
      const util::TemporaryUniquePath workingDirectory =
        util::TemporaryUniquePath("test-working-directory");

      GitfanInterfaceTest()
      {
        data.ideal.path = (dataPath / "m5_ideal").string();
        data.Q.path = (dataPath / "m5_torus_action").string();
        data.r = 10;
        data.k = 5;
        data.moving_cone.valid = false;
        data.symmetry_group.valid = false;
        data.symmetry_group.path = (dataPath / "m5_symmetry_group").string();
        data.symmetry_group_size = 120;
        data.simplex_orbit_representatives.valid = false;
        data.simplex_orbit_representatives.path =
          (dataPath / "m5_simplex_orbit_representatives").string();
        data.precomputed_orbit_cones.valid = false;
        data.precomputed_orbit_cones.path =
          (dataPath / "m5_orbit_cones" / "list").string();
        data.precomputed_symmetry_group_on_hashes.valid = false;
        data.precomputed_symmetry_group_on_hashes.path =
          (dataPath / "m5_symmetry_group_on_hashes").string();
      }

      static void SetUpTestCase()
      {
        _fullDimAFaces = conversion::loadList_TESTING_ONLY
          (dataPath / "m5_full_dim_afaces");
        _orbitCones = util::toPnetList
          (util::loadOrbitConeListFile(dataPath / "m5_orbit_cones" / "list"));
      }

      static void TearDownTestCase()
      {
        _fullDimAFaces = pnet_list();
        _orbitCones = pnet_list();
      }

      void SetUp()
      {
        auto options = storage::Options
          ( std::vector<std::string>{}
          , static_cast<fs::path>(workingDirectory) / "storage"
          );
        options.implementationTag = "constant";
        storageOptions = options.serialize();
      }

      void TearDown()
      {
        singular::gitfan::killGlobalSymbols_TESTING_ONLY();
      }

      static const pnet_list& fullDimAFaces()
      {
        return GitfanInterfaceTest::_fullDimAFaces;
      }

      static const pnet_list& orbitCones()
      {
        return GitfanInterfaceTest::_orbitCones;
      }

      static pnet_value minimalRepresentative(const pnet_value& representative)
      {
        return singular::gitfan::
          minimalOrbitRepresentativeOfGroupAction_TESTING_ONLY
            (as<pnet_list>(representative), dataPath / "m5_symmetry_group");
      }
  };

  const fs::path GitfanInterfaceTest::dataPath
    ("@SINGULAR_TESTDATA_DIR@");
  pnet_list GitfanInterfaceTest::_fullDimAFaces;
  pnet_list GitfanInterfaceTest::_orbitCones;

  TEST_F(GitfanInterfaceTest, preprocessProblemDataCanComputeM5Dimensions)
  {
    data.symmetry_group.valid = true;
    pnet_problem_data preData = data;
    preData.r = 0;
    preData.k = 0;
    preData.symmetry_group_size = 0;
    preprocessProblemData(preData, pnet_directory(workingDirectory.string()));
    EXPECT_EQ(data.r, preData.r);
    EXPECT_EQ(data.k, preData.k);
    EXPECT_EQ(data.symmetry_group_size, preData.symmetry_group_size);
  }

  TEST_F(GitfanInterfaceTest, preprocessProblemDataCanComputeM5MovingCone)
  {
    util::TemporaryUniquePath movingConePath
      ("test-moving-cone");
    data.moving_cone.valid = true;
    data.moving_cone.path = movingConePath.string();
    preprocessProblemData(data, pnet_directory(workingDirectory.string()));
    EXPECT_PRED2(&util::ssiFilesExistWithIdenticalContent,
                 dataPath / "m5_moving_cone",
                 static_cast<fs::path>(movingConePath));
  }

  TEST_F(GitfanInterfaceTest,
         preprocessProblemDataCanComputeM5SimplexOrbitRepresentatives)
  {
    data.symmetry_group.valid = true;
    preprocessProblemData(data, pnet_directory(workingDirectory.string()));
    ASSERT_TRUE(data.simplex_orbit_representatives.valid);
    pnet_list expected = conversion::loadList_TESTING_ONLY
      (dataPath / "m5_simplex_orbit_representatives");
    pnet_list actual = conversion::loadList_TESTING_ONLY
      (fs::path(data.simplex_orbit_representatives.path));
    std::transform(expected.begin(), expected.end(), expected.begin(),
                   &minimalRepresentative);
    std::transform(actual.begin(), actual.end(), actual.begin(),
                   &minimalRepresentative);
    EXPECT_EQ(util::asSet(expected), util::asSet(actual));
  }

  TEST_F(GitfanInterfaceTest,
         processPrecomputedDataCreatesCorrectMetadataForM5)
  {
    data.precomputed_orbit_cones.valid = true;
    data.precomputed_symmetry_group_on_hashes.valid = true;

    pnet_list precomputedOrbitCones;
    pnet_file precomputedSymmetryGroupOnHashes;
    processPrecomputedData
      ( data
      , pnet_directory(workingDirectory.string())
      , precomputedOrbitCones
      , precomputedSymmetryGroupOnHashes
      );

    EXPECT_EQ(orbitCones().size(), precomputedOrbitCones.size());
    for (const auto& precomputedOrbitCone : precomputedOrbitCones
        | boost::adaptors::transformed (&pnetc::type::file::from_value)
        )
    {
      fs::path orbitConePath(precomputedOrbitCone.path);
      EXPECT_PRED2( &util::ssiFilesExistWithIdenticalContent
                  , dataPath / "m5_orbit_cones" / orbitConePath.filename()
                  , orbitConePath
                  );
    }
    EXPECT_PRED2( &util::ssiFilesExistWithIdenticalContent
                , fs::path(data.precomputed_symmetry_group_on_hashes.path)
                , fs::path(precomputedSymmetryGroupOnHashes.path)
                );
  }

  TEST_F(GitfanInterfaceTest,
         canRemoveOrbitStructureAndReturnSymmetryGroupOnHashesFileForM5)
  {
    data.symmetry_group.valid = true;
    const std::vector<fs::path> orbitLists
      { dataPath / "m5_orbit_cones" / "orbit1"
      , dataPath / "m5_orbit_cones" / "orbit2"
      , dataPath / "m5_orbit_cones" / "orbit3"
      , dataPath / "m5_orbit_cones" / "orbit4"
      };
    const std::vector<fs::path> groupActionOnOrbits
      { dataPath / "m5_symmetry_group_on_hashes_orbit1"
      , dataPath / "m5_symmetry_group_on_hashes_orbit2"
      , dataPath / "m5_symmetry_group_on_hashes_orbit3"
      , dataPath / "m5_symmetry_group_on_hashes_orbit4"
      };

    pnet_list orbitInfos;
    for (unsigned int i = 0; i < orbitLists.size(); i++)
    {
      const pnet_list orbit =
        util::toPnetList(util::loadOrbitConeListFile(orbitLists[i]));
      const pnet_file groupActionFile =
        pnet_file(groupActionOnOrbits[i].string());
      pnet_map orbitInfo;
      orbitInfo.insert({Keys::ELEMENTS(), orbit});
      orbitInfo.insert({ Keys::GROUP_ACTION()
                       , pnetc::type::file::to_value(groupActionFile)
                       });
      orbitInfos.push_back(orbitInfo);
    }
    pnet_file symmetryGroupFile =
      removeOrbitStructureAndReturnSymmetryGroupOnHashesFile
        (data, pnet_directory(workingDirectory.string()), orbitInfos);

    util::permutation permutation;
    ASSERT_NO_THROW
    (
      permutation = util::computePermutation
        ( util::toFilePaths(orbitInfos)
        , util::toFilePaths(orbitCones())
        , &util::ssiFilesExistWithIdenticalContent
        );
    );
    auto action = singular::gitfan::readGroupAction(symmetryGroupFile.path);
    util::applyPermutationToGroupAction(permutation, action);
    const auto expectedAction = singular::gitfan::readGroupAction
      (data.precomputed_symmetry_group_on_hashes.path);
    EXPECT_EQ(expectedAction, action);
  }

  TEST_F(GitfanInterfaceTest, createSimplexFacesCanCreateAtBeginIntermediateEnd)
  {
    std::vector<pnet_list_range> lasts;
    std::vector<int> ranges;
    std::vector<pnet_list_range> expectedResults;
    std::vector<bool> expectedFinisheds;

    lasts.emplace_back();
    ranges.emplace_back(5);
    expectedResults.emplace_back(pnet_list { 1,2,3,4,5 }, 5);
    expectedFinisheds.emplace_back(false);

    lasts.emplace_back(pnet_list { 1,2,3,4,5,6 }, 10);
    ranges.emplace_back(10);
    expectedResults.emplace_back(pnet_list { 1,2,3,4,7,9 }, 10);
    expectedFinisheds.emplace_back(false);

    lasts.emplace_back(pnet_list { 1,2,3,4,5,6,7,8,9 }, 10);
    ranges.emplace_back(10);
    expectedResults.emplace_back(pnet_list { 1,2,3,4,5,6,7,8,9,10 }, 1);
    expectedFinisheds.emplace_back(true);


    for (unsigned int i = 0; i < lasts.size(); i++)
    {
      bool finished;
      const auto result =
        createSimplexFaces(data.r, data.k, lasts[i], ranges[i], finished);
      EXPECT_EQ(result, lasts[i]);
      EXPECT_EQ(expectedResults[i], result);
      EXPECT_EQ(expectedFinisheds[i], finished);
    }
  }

  TEST_F(GitfanInterfaceTest,
         computeFullDimAFacesFromListRangeCanRecreateM5AFaces)
  {
    pnet_list_range range;
    SimplexFaceIterator facesIterator(data.r, data.k);
    range.start = conversion::wrap(*facesIterator);
    range.length = 0;
    unsigned int incWidth = 1024;
    while (!facesIterator.isEnd())
    {
      range.length += facesIterator.increment(incWidth);
      incWidth *= 2;
    }

    const pnet_list result = computeFullDimAFacesFromRange(data, range);
    EXPECT_EQ(util::asSet(fullDimAFaces()), util::asSet(result));
  }

  TEST_F(GitfanInterfaceTest,
         computeFullDimAFacesFromFileCanRecreateM5AFacesInTwoSteps)
  {
    pnet_list results;
    data.simplex_orbit_representatives.valid = true;
    data.simplex_orbit_representatives.path =
      (dataPath / "m5_simplex_faces").string();
    {
      pnet_list_range range;
      range.start.push_back(0ul);
      range.length = 512;
      const pnet_list result = computeFullDimAFacesFromFile(data, range);
      results.insert(results.end(), result.begin(), result.end());
    }

    {
      boost::filesystem::ifstream ifs
        ( fs::path(data.simplex_orbit_representatives.path)
        , boost::filesystem::ifstream::in | boost::filesystem::ifstream::binary
        );
      ASSERT_TRUE(ifs);
      for (int i = 0; i < 512; i++)
      {
        std::string line;
        std::getline(ifs, line);
      }
      pnet_list_range range;
      range.start.push_back((unsigned long)ifs.tellg());
      range.length = 511;
      const pnet_list result = computeFullDimAFacesFromFile(data, range);
      results.insert(results.end(), result.begin(), result.end());
    }
    EXPECT_EQ(util::asSet(fullDimAFaces()), util::asSet(results));
  }

  TEST_F(GitfanInterfaceTest, computeOrbitConesCanRecreateM5OrbitCones)
  {
    std::vector<fs::path> actualOrbitCones;
    for (const auto& aface : fullDimAFaces()
        | boost::adaptors::transformed(&as<pnet_list>)
        )
    {
      pnet_file file = computeOrbitCone
        (aface, data, pnet_directory(workingDirectory.string()));
      actualOrbitCones.emplace_back(file.path);
    }
    EXPECT_NO_THROW
    (
      util::computePermutation
        ( actualOrbitCones
        , util::loadOrbitConeListFile(dataPath / "m5_orbit_cones" / "list")
        , &util::ssiFilesExistWithIdenticalContent
        );
    );
  }

  TEST_F(GitfanInterfaceTest,
         intersectWithMovingConeCanComputeIntersectsAndDropConesOfLowDimension)
  {
    data.ideal.path = "";
    data.Q.path = "";
    data.r = 3;
    data.k = 3;
    const auto torus_symbol = singular::gitfan::Symbols::TORUS_ACTION();
    singular::call_and_discard("intmat "+ torus_symbol + "[3][3];"
      + torus_symbol + " = " + torus_symbol + " + 1;");
    data.moving_cone.valid = true;
    data.moving_cone.path =
      (dataPath / "sample_cones" / "cutoff_top_right").string();

    const util::TemporaryUniquePath tmpCones
      ("test-cones_copy");
    util::copyDirectory(dataPath / "sample_cones", tmpCones);

    const std::vector<fs::path> conePaths
      { static_cast<fs::path>(tmpCones) / "bottom_left"
      , static_cast<fs::path>(tmpCones) / "bottom_right"
      , static_cast<fs::path>(tmpCones) / "top_left"
      , static_cast<fs::path>(tmpCones) / "top_right"
      , static_cast<fs::path>(tmpCones) / "intersect_top"
      };
    const pnet_list cones = util::toPnetList(conePaths);
    const std::vector<fs::path> expectedPaths
      { static_cast<fs::path>(tmpCones) / "bottom_right"
      , static_cast<fs::path>(tmpCones) / "top_left"
      , static_cast<fs::path>(tmpCones) / "top_right"
      , static_cast<fs::path>(tmpCones) / "intersect_top"
      };
    const std::vector<fs::path> expectedCones
      { dataPath / "sample_cones" / "cutoff_right"
      , dataPath / "sample_cones" / "intersect_top"
      , dataPath / "sample_cones" / "cutoff_top_right"
      , dataPath / "sample_cones" / "intersect_top"
      };

    const pnet_list expected = util::toPnetList(expectedPaths);
    const pnet_list actual = intersectWithMovingCone(data, cones);
    EXPECT_EQ(expected, actual);

    int index = 0;
    for (const auto& file : actual
        | boost::adaptors::transformed(&pnetc::type::file::from_value)
        )
    {
      EXPECT_PRED2(&util::ssiFilesExistWithIdenticalContent,
                     expectedCones[index], fs::path(file.path));
      index++;
    }
  }

  TEST_F(GitfanInterfaceTest,
         isLastOfAllEqualOrbitConeOrbitsDetectsALastAndANonLast)
  {
    pnet_list orbitInfos;
    std::vector<int> orbitIndices {1,2,1};
    for (int i : orbitIndices)
    {
      auto orbit = util::loadOrbitConeListFile(
        dataPath / "m5_orbit_cones" / ("orbit" + std::to_string(i)));
      // Reoder such that the minimal element is at the front while the
      // other elements are shuffled
      std::sort(orbit.begin(), orbit.end(), filecontent::Compare());
      std::random_device rd;
      std::mt19937 g(rd());
      std::shuffle(std::next(orbit.begin(), 1), orbit.end(), g);
      pnet_map orbitInfo;
      orbitInfo.insert({Keys::ELEMENTS(), util::toPnetList(orbit)});
      orbitInfos.push_back(orbitInfo);
    }
    auto orbitInfo = orbitInfos.cbegin();
    EXPECT_FALSE(isLastOfAllEqualOrbitConeOrbits(data, orbitInfos, orbitInfo));
    EXPECT_TRUE(isLastOfAllEqualOrbitConeOrbits(data, orbitInfos, ++orbitInfo));
    EXPECT_TRUE(isLastOfAllEqualOrbitConeOrbits(data, orbitInfos, ++orbitInfo));
  }

  TEST_F(GitfanInterfaceTest, expandOrbitConeOrbitCanExpandTheM5Orbits)
  {
    data.symmetry_group.valid = true;

    const std::vector<fs::path> conePaths
      { dataPath / "m5_orbit_cones" / "oc_1_1"
      , dataPath / "m5_orbit_cones" / "oc_2_1"
      , dataPath / "m5_orbit_cones" / "oc_3_1"
      , dataPath / "m5_orbit_cones" / "oc_4_1"
      };

    const std::vector< std::vector<fs::path> > expectedOrbits
      { util::loadOrbitConeListFile(dataPath / "m5_orbit_cones" / "orbit1")
      , util::loadOrbitConeListFile(dataPath / "m5_orbit_cones" / "orbit2")
      , util::loadOrbitConeListFile(dataPath / "m5_orbit_cones" / "orbit3")
      , util::loadOrbitConeListFile(dataPath / "m5_orbit_cones" / "orbit4")
      };

    const std::vector<singular::gitfan::GroupAction> expectedGroupAction
      { singular::gitfan::readGroupAction
          (dataPath / "m5_symmetry_group_on_hashes_orbit1")
      , singular::gitfan::readGroupAction
          (dataPath / "m5_symmetry_group_on_hashes_orbit2")
      , singular::gitfan::readGroupAction
          (dataPath / "m5_symmetry_group_on_hashes_orbit3")
      , singular::gitfan::readGroupAction
          (dataPath / "m5_symmetry_group_on_hashes_orbit4")
      };

    for (unsigned int i = 0; i < conePaths.size(); i++)
    {
      const pnet_map orbitInfo = expandOrbitConeOrbit
        ( data
        , pnet_directory(workingDirectory.string())
        , pnet_file(conePaths[i].string())
        , i
        );
      const pnet_list orbit = as<pnet_list>(orbitInfo.at(Keys::ELEMENTS()));
      const fs::path groupActionFile =
        pnetc::type::file::from_value(orbitInfo.at(Keys::GROUP_ACTION())).path;
      auto groupAction = singular::gitfan::readGroupAction(groupActionFile);
      util::permutation permutation;
      EXPECT_NO_THROW
      (
        permutation = util::computePermutation
          ( util::toFilePaths(orbit)
          , expectedOrbits[i]
          , &util::ssiFilesExistWithIdenticalContent
          );
        util::applyPermutationToGroupAction(permutation, groupAction);
      );
      EXPECT_EQ(expectedGroupAction[i], groupAction);
    }
  }

  TEST_F(GitfanInterfaceTest, computeInitialConeReturnsNoneWithNoOrbitCones)
  {
    EXPECT_FALSE(computeInitialCone(data, pnet_list { }, pnet_file()));
  }

  TEST_F(GitfanInterfaceTest, expandConesCanCompute3SetsOfNeighbourHashesInM5)
  {
    const pnet_list cones
      { pnet_list { 11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,
                    31,32,33,34,35,36 }
      , pnet_list { 1,11,12,13,14,15,16,18,19,21,22,24,25,26,27,28,29,30,31,32,
                    33,34,36 }
      , pnet_list { 1,2,11,12,13,15,16,18,19,22,25,26,27,28,29,30,31,32,33,36 }
      };

    const pnet_list_of_sets neighbours
      { pnet_set
        { pnet_list { 1,11,12,13,14,15,16,18,19,21,22,24,25,26,27,28,29,30,31,32,
                      33,34,36 }
        , pnet_list { 2,11,12,13,15,16,17,18,19,20,22,23,25,26,27,28,29,30,31,32,
                      33,35,36 }
        , pnet_list { 3,11,12,13,14,16,17,19,20,21,22,23,24,26,27,28,29,30,31,32,
                      34,35,36 }
        , pnet_list { 4,11,12,13,14,15,17,18,20,21,23,24,25,26,27,28,29,30,31,33,
                      34,35,36 }
        , pnet_list { 5,12,13,14,15,16,17,18,19,20,21,23,24,26,27,28,29,30,32,33,
                      34,35,36 }
        , pnet_list { 6,11,13,14,15,16,17,18,20,21,22,23,25,26,27,28,29,31,32,33,
                      34,35,36 }
        , pnet_list { 7,11,12,14,15,16,17,19,20,22,23,24,25,26,27,28,30,31,32,33,
                      34,35,36 }
        , pnet_list { 8,11,12,14,15,17,18,19,20,21,22,24,25,26,27,29,30,31,32,33,
                      34,35,36 }
        , pnet_list { 9,11,13,14,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,
                      34,35,36 }
        , pnet_list { 10,12,13,15,16,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,
                      34,35,36 }
        }
      , pnet_set
        { pnet_list { 1,2,11,12,13,15,16,18,19,22,25,26,27,28,29,30,31,32,33,36 }
        , pnet_list { 1,3,11,12,13,14,16,19,21,22,24,26,27,28,29,30,31,32,34,36 }
        , pnet_list { 1,4,11,12,13,14,15,18,21,24,25,26,27,28,29,30,31,33,34,36 }
        , pnet_list { 1,5,12,13,14,15,16,18,19,21,24,26,27,28,29,30,32,33,34,36 }
        , pnet_list { 1,6,11,13,14,15,16,18,21,22,25,26,27,28,29,31,32,33,34,36 }
        , pnet_list { 1,7,11,12,14,15,16,19,22,24,25,26,27,28,30,31,32,33,34,36 }
        , pnet_list { 11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,
                      31,32,33,34,35,36 }
        }
      , pnet_set
        { pnet_list { 1,2,3,11,12,13,16,19,22,26,27,28,29,30,31,32,36 }
        , pnet_list { 1,2,4,11,12,13,15,18,25,26,27,28,29,30,31,33,36 }
        , pnet_list { 1,2,5,12,13,15,16,18,19,26,27,28,29,30,32,33,36 }
        , pnet_list { 1,11,12,13,14,15,16,18,19,21,22,24,25,26,27,28,29,30,31,32,
                      33,34,36 }
        , pnet_list { 2,11,12,13,15,16,17,18,19,20,22,23,25,26,27,28,29,30,31,32,
                      33,35,36 }
        }
      };
    EXPECT_EQ
      ( pnet_list_of_sets { }
      , expandCones
          ( data
          , orbitCones()
          , pnet_file((dataPath / "m5_trivial_symmetry_group_on_hashes").string())
          , pnet_list { }
          )
      ) << "for input \"" << pnet_list { } << "\".";

    EXPECT_EQ
      (neighbours
      , expandCones
          ( data
          , orbitCones()
          , pnet_file((dataPath / "m5_trivial_symmetry_group_on_hashes").string())
          , cones
          )
      ) << "for input \"" << cones << "\".";
  }

  TEST_F(GitfanInterfaceTest,
         insertNeighboursAndGetExpandableConesInsertAndReturnConesInCorrectBatchSize)
  {
    const pnet_set toInsert
      {  pnet_list { }
      , pnet_list { 1 }
      , pnet_list { 1,3,5,11,25 }
      , pnet_list { 3,5 }
      , pnet_list { 1 }
      , pnet_list { 3,5 }
      , pnet_list { 1,2,3 }
      , pnet_list { 3,4,5 }
      };
    const auto countInserted =
      insertNeighbours(storageOptions, orbitCones().size(), pnet_list_of_sets{toInsert}, pnet_list{pnet_list{}});
    EXPECT_EQ(6ul, countInserted);

    const std::vector<unsigned long> requestedSizes { 1, 3, 3, 2};
    const std::vector<size_t> expectedSizes { 1, 3, 2, 0 };

    pnet_list retrieved;
    for (size_t i = 0; i < requestedSizes.size(); i++)
    {
      pnet_list result = getExpandableCones(storageOptions, requestedSizes[i]);
      EXPECT_EQ(expectedSizes[i], result.size());
      retrieved.splice(retrieved.end(), result);
    }

    EXPECT_EQ(toInsert, util::asSet(retrieved));
  }

  TEST_F(GitfanInterfaceTest,
         outputOrbitConesOrderCanCreateFileWithM5OrbitCones)
  {
    outputOrbitConesOrder( pnet_directory(workingDirectory.string())
                         , orbitCones()
                         );
    EXPECT_PRED2(&util::ssiFilesExistWithIdenticalContent,
                 dataPath / "m5_orbit_cones" / "list",
                 Paths::orbitConeOrderFile(workingDirectory));
  }

}}}
